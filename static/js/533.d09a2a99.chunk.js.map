{"version":3,"file":"static/js/533.d09a2a99.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/Container.js","../node_modules/react-bootstrap/esm/Row.js","Components/ResetPasswordForm.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"],"sourcesContent":["\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Container = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  fluid = false,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'container');\n  const suffix = typeof fluid === 'string' ? `-${fluid}` : '-fluid';\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, fluid ? `${prefix}${suffix}` : prefix)\n  });\n});\nContainer.displayName = 'Container';\nexport default Container;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, Button, Container, Row, Col, Modal } from 'react-bootstrap';\r\nimport LoginForm from '../Images/login-form.png';\r\nimport LoginFormLogo from '../Images/Logo.png';\r\nimport * as Yup from 'yup';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { useFormik } from 'formik';\r\n\r\nconst ResetPasswordForm = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isVerified, setIsVerified] = useState(false);\r\n    // const [email, setEmail] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const openModal = () => {\r\n        setIsOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleOutsideClick = (event) => {\r\n        if (event.target.className.includes('modal add-question-modal')) {\r\n            closeModal();\r\n        }\r\n    };\r\n\r\n    const BackToLogin = () => {\r\n        navigate('/Login');\r\n    };\r\n\r\n    const handleVerifyEmail = () => {\r\n        setIsVerified(true);\r\n    };\r\n\r\n    // const resetPassword = async () => {\r\n    //     try {\r\n    //         const request = {\r\n    //             emailId: email,\r\n    //             newPassword: formik.values.newPassword,\r\n    //             confirmPassword: formik.values.confirmPassword\r\n    //         }\r\n    //         const response = await api.post(CHANGE_PASSWORD, request);\r\n    //         if (response.status === 200) {\r\n    //             localStorage.removeItem('token');\r\n    //             navigate('/login')\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.log(error, \" Error\")\r\n    //         toaster('error', error.response.data.message)\r\n    //     }\r\n    // }\r\n    const PasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*]).{8,}$/;\r\n    const validationSchema = Yup.object().shape({\r\n        newPassword: Yup.string().required('New password is required')\r\n        .min(8,\"Minimum 8 characters required\")\r\n        .max(32,\"Maximum allowed characters are 32\")\r\n        .matches(PasswordRegex, \"Password must contain atleast one Captial letter, number and a special character\"),\r\n        confirmPassword: Yup.string().required('Confirm your password')\r\n        .oneOf([Yup.ref('newPassword'), null], 'newPassword must match')\r\n        .matches(PasswordRegex, \"Password must contain atleast one Captial letter, number and a special character\"),\r\n    });\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPassword: '',\r\n            confirmPassword: '',\r\n        },\r\n        // onSubmit: resetPassword,\r\n        validationSchema: validationSchema,\r\n    });\r\n\r\n    const handleInputChange = (fieldName, value) => {\r\n        formik.setFieldValue(fieldName, value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <section className=\"d-flex\">\r\n                <Container fluid>\r\n                    <Row className=\"p-0\">\r\n                        <Col lg={6} className=\"p-0\">\r\n                            <img src={LoginForm} className=\"w-100 left-side-image\" alt=\"\" />\r\n                        </Col>\r\n                        <Col lg={6} className=\"d-flex justify-content-center align-items-center flex-column py-4\">\r\n                            <div className=\"d-flex justify-content-center flex-column\" style={{ width: '50%' }}>\r\n                                <img src={LoginFormLogo} alt=\"\" className=\"w-100 mb-5\" />\r\n                                <Form className=\"w-100\">\r\n                                    {!isVerified ? (\r\n                                        <>\r\n                                            <h5 className=\"mb-4 fw-medium\">ENTER YOUR EMAIL</h5>\r\n                                            <Form.Group className=\"mb-5\" controlId=\"verifyEmailInput\">\r\n                                                <Form.Label>Email</Form.Label>\r\n                                                <Form.Control type=\"email\" placeholder='Enter Email' />\r\n                                            </Form.Group>\r\n                                            <Button variant=\"primary\" className=\"login-form-btn form-control mb-5\" onClick={handleVerifyEmail}>\r\n                                                VERIFY\r\n                                            </Button>\r\n                                        </>\r\n                                    ) : (\r\n                                        <>\r\n                                            <h5 className=\"mb-4 fw-medium\">RESET PASSWORD</h5>\r\n                                            <Form.Group className=\"mb-3\" controlId=\"emailInput\">\r\n                                                <Form.Label>Email</Form.Label>\r\n                                                <Form.Control type=\"email\" placeholder='Enter Email'/>\r\n                                            </Form.Group>\r\n                                            <Form.Group className=\"mb-3\" controlId=\"newPasswordInput\">\r\n                                                <Form.Label>New Password</Form.Label>\r\n                                                <Form.Control  name='newPassword'\r\n                                                       type=\"password\"\r\n                                                       placeholder=\"Enter New Password\"\r\n                                                       value={formik.values.newPassword}\r\n                                                       onChange={e => {\r\n                                                         handleInputChange('newPassword', e.target.value);\r\n                                                       }}\r\n                                                      onBlur={formik.handleBlur}\r\n                                                      />\r\n                                             {formik.touched.newPassword && formik.errors.newPassword && (\r\n                                            <Form.Text className=\"text-danger\">\r\n                                                {formik.errors.newPassword}{' '}\r\n                                            </Form.Text>\r\n                                               )}\r\n                                            </Form.Group>\r\n                                            <Form.Group className=\"mb-3\" controlId=\"confirmPasswordInput\">\r\n                                                <Form.Label>Confirm Password</Form.Label>\r\n                                                <Form.Control\r\n                                            name='confirmPassword'\r\n                                            type=\"password\"\r\n                                            placeholder=\"Re-Enter New Password\"\r\n                                            value={formik.values.confirmPassword}\r\n                                            onChange={e => {\r\n                                                handleInputChange('confirmPassword', e.target.value);\r\n                                            }}\r\n                                            onBlur={formik.handleBlur}\r\n                                        />\r\n                                        {formik.touched.confirmPassword && formik.errors.confirmPassword && (\r\n                                            <Form.Text className=\"text-danger\">\r\n                                                {formik.errors.confirmPassword}{' '}\r\n                                            </Form.Text>\r\n                                        )}\r\n                                            </Form.Group>\r\n                                            <Button variant=\"primary\" className=\"login-form-btn form-control mb-5\" onClick={openModal}>\r\n                                                RESET\r\n                                            </Button>\r\n                                        </>\r\n                                    )}\r\n                                </Form>\r\n                                <Modal show={isOpen} onHide={closeModal} centered>\r\n                                 <Modal.Body className=\"py-2 \">\r\n                                     <h5 className=\"modal-box-heading text-center\">\r\n                                            PASSWORD RESET SUCCESSFUL!\r\n                                     </h5>\r\n                                      <div className=\"d-grid gap-2 col-6 mx-auto py-4\">\r\n                                      <Button variant=\"primary\" className=\"login-form-btn\" onClick={BackToLogin}>\r\n                                       LOGIN NOW\r\n                                      </Button>\r\n                                    </div>\r\n                                 </Modal.Body>\r\n                             </Modal>\r\n                          </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResetPasswordForm;\r\n","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.indexOf(n) >= 0) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };"],"names":["Container","React","_ref","ref","bsPrefix","fluid","as","Component","className","props","prefix","useBootstrapPrefix","suffix","concat","_jsx","classNames","displayName","Row","decoratedBsPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","classes","forEach","brkPoint","propValue","cols","infix","push","ResetPasswordForm","isOpen","setIsOpen","useState","isVerified","setIsVerified","navigate","useNavigate","closeModal","PasswordRegex","validationSchema","Yup","shape","newPassword","required","min","max","matches","confirmPassword","oneOf","formik","useFormik","initialValues","handleInputChange","fieldName","value","setFieldValue","children","_jsxs","Col","lg","src","LoginForm","alt","style","width","LoginFormLogo","Form","_Fragment","Group","controlId","Label","Control","type","placeholder","name","values","onChange","e","target","onBlur","handleBlur","touched","errors","Text","Button","variant","onClick","openModal","handleVerifyEmail","Modal","show","onHide","centered","Body","BackToLogin","_objectWithoutPropertiesLoose","r","t","n","hasOwnProperty","call","indexOf","_setPrototypeOf","Object","setPrototypeOf","bind","__proto__"],"sourceRoot":""}